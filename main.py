from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaWebPage
import asyncio
import os
import sys

API_ID = os.getenv("YOUR_API_ID")
API_HASH = os.getenv("YOUR_API_HASH")
SESSION_NAME = "gingers_session"

SOURCE_CHAT_ID = {-1002293398473, -1002270373322}
DESTINATION_CHAT_ID = -1002334681781

THREAD_MAPPING = {
    3830: 2817,
    35311: 2815,
    679: 2813,
    45795: 2811,
    45155: 2809,
    597: 2807,
    5914: 2805,
    674: 2803,
    13144: 2801,
    596: 2799,
    13781: 2797,
}
FALLBACK_THREAD_ID = 988

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)


@client.on(events.NewMessage(chats=SOURCE_CHAT_ID))
async def forward_message(event):
    try:
        destination_thread = None

        # –Ø–∫—â–æ –∫–∞–Ω–∞–ª –±–µ–∑ –≥—ñ–ª–æ–∫
        if event.chat_id in {-1002270373322}:
            destination_thread = FALLBACK_THREAD_ID

        # –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å–ø—Ä–æ–±—É–π –∑–Ω–∞–π—Ç–∏ thread
        elif event.message.reply_to:
            thread_id = event.message.reply_to.reply_to_msg_id
            if thread_id in THREAD_MAPPING:
                destination_thread = THREAD_MAPPING[thread_id]

        if destination_thread:
            media = event.message.media

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ web page
            if media and isinstance(media, MessageMediaWebPage):
                await client.send_message(
                    DESTINATION_CHAT_ID,
                    event.message.message,
                    reply_to=destination_thread
                )
            elif media:
                await client.send_file(
                    DESTINATION_CHAT_ID,
                    file=event.message.media,
                    caption=event.message.message,
                    reply_to=destination_thread
                )
            else:
                await client.send_message(
                    DESTINATION_CHAT_ID,
                    event.message.message,
                    reply_to=destination_thread
                )
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—ñ–ª–∫—É {destination_thread}")
        else:
            print("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–µ: –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –≥—ñ–ª–∫–∏.")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await asyncio.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–Ω–∏–∂–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è


async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    while True:
        try:
            await client.run_until_disconnected()
        except Exception as e:
            print(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ: {e}")
            print("üîÅ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
            await asyncio.sleep(1)

            # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
            os.execv(sys.executable, ['python'] + sys.argv)


with client:
    client.loop.run_until_complete(main())
